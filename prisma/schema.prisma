generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String  @unique
  phone            String  @unique
  password         String
  imageUrl         String?
  role             UserRole @default(user) // "user", "admin", "superadmin"
  verificationCode Int?
  createdAt        DateTime? @default(now()) 
  updatedAt        DateTime? @updatedAt 

  Worker Worker[]

  DeliveryDriver DeliveryDriver[]

  Order Order[]

  Wallet Wallet[]

  locations   UserLocation[]
}
enum UserRole {
  user
  admin
  store
  worker
  superadmin
}
model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  subName     String?    // New field for subName
  slug        String     @unique
  description String?
  info        String?    // New field for additional information
  price       Float?     // New field for price
  imageUrl    String?
  type        ServiceType                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  status      String     @default("active") // "active", "inactive", "archived"
  sortOrder   Int        @default(0)
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 
  services    Service[]

  Store Store[]
}


enum ServiceType {
  service
  delivery
}

enum ServiceSubType {
  delivery_service
  delivery_driver
}

model Service {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String     @unique
  description String?
  categoryId  String     @db.ObjectId
  category    Category?  @relation(fields: [categoryId], references: [id])
  type        ServiceType                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  subType        ServiceSubType?                  // "worker" (عمالة مؤقتة) أو "delivery" (توصيل)
  price       Float?     // سعر الخدمة (اختياري)
  duration    Int?       // مدة الخدمة بالساعات (للعمالة المؤقتة)
  availability Boolean   @default(true) // هل الخدمة متاحة؟
  imageUrl    String?
  iconUrl    String?
  rating      Float      @default(4.0)  // تقييم الخدمة
  ratingCount Int       @default(0)    // عدد التقييمات
  warranty    Int?                     // فترة الضمان بالأيام
  installmentAvailable Boolean @default(false) // هل متاح التقسيط
  installmentMonths Int?               // عدد شهور التقسيط
  monthlyInstallment Float?            // قيمة القسط الشهري
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 

  parameters  ServiceParameter[]
  Order Order[]
}

model ServiceParameter {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المعيار
  description String?    // وصف المعيار
  imageUrl    String?    // صورة توضيحية
  price       Float      // السعر
  warranty    Int?       // فترة الضمان بالأيام
  installmentAvailable Boolean @default(false) // هل متاح التقسيط
  installmentMonths Int?      // عدد شهور التقسيط
  monthlyInstallment Float?   // قيمة القسط الشهري
  serviceId   String     @db.ObjectId
  service     Service    @relation(fields: [serviceId], references: [id])
  status      String     @default("active") // "active", "inactive"
  sortOrder   Int       @default(0)
  rating      Float?    @default(5.0)  // تقييم الخدمة
  ratingCount Int?      @default(1)    // عدد التقييمات
  
  // FAQ Fields
  faqs        Json?     // Array of FAQ objects
  whatIncluded Json?    // ما تشتمل عليه الخدمة
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Worker {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  userId          String    @db.ObjectId
  user            User?     @relation(fields: [userId], references: [id])
  title           String    // الوظيفة (مثل "مصمم UX")
  description     String    // وصف مختصر للخبرة
  location        String    // موقع العامل (مثل "نيويورك، الولايات المتحدة")
  profileImage    String?   // رابط صورة الملف الشخصي
  isAvailable     Boolean   @default(true)  // حالة الاتصال
  isFavorite      Boolean   @default(false) // محفوظ في المفضلة
  hourlyRate      Float     // السعر في الساعة بالدولار
  jobSuccessRate  Float     @default(0.0)   // معدل النجاح (0-100%)
  totalEarned     Float     @default(0.0)   // إجمالي الأرباح بالدولار
  skills          String[]  // قائمة مجالات الخبرة
  rating          Float     @default(0.0)
  reviewsCount    Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  Order Order[]
}

model DeliveryDriver {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  vehicleType String?    // نوع المركبة
  license     String?    // رقم الرخصة
  availability Boolean   @default(true)
  rating      Float      @default(0.0)
  reviewsCount Int       @default(0)
  completedOrders Int    @default(0) // عدد الطلبات المكتملة
  earnings    Float      @default(0.0) // الأرباح
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 

  Order Order[]
}

model Order {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  userId       String     @db.ObjectId
  user         User?      @relation(fields: [userId], references: [id])
  serviceId    String     @db.ObjectId
  service      Service?   @relation(fields: [serviceId], references: [id])
  providerId   String     @db.ObjectId // العامل أو السائق
  provider     Worker?    @relation(fields: [providerId], references: [id])
  deliveryDriverId String? @db.ObjectId // السائق
  deliveryDriver DeliveryDriver? @relation(fields: [deliveryDriverId], references: [id])
  description  String?
  imageUrl     String?
  address      String?
  latitude     Float?
  longitude    Float?
  price        Float?
  duration     Int?
  status       String     @default("pending") // "pending", "in_progress", "completed", "canceled"
  totalAmount  Float
  paymentStatus String    @default("pending") // "pending", "paid", "failed"
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 
  storeId      String?    @db.ObjectId  // إضافة هذا الحقل
  store        Store?     @relation(fields: [storeId], references: [id])
}

model Wallet {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User?      @relation(fields: [userId], references: [id])
  balance     Float      @default(0.0)
  transactions Transaction[]
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt 
}

model Transaction {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  walletId     String     @db.ObjectId
  wallet       Wallet?    @relation(fields: [walletId], references: [id])
  type         String     // "deposit" or "withdrawal"
  amount       Float
  status       String     @default("pending") // "pending", "completed", "failed"
  createdAt    DateTime   @default(now()) 
  updatedAt    DateTime   @updatedAt 
}

model Store {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المتجر
  description String?    // وصف المتجر
  type        String     // التصنيف الرئيسي (مثل: مأكولات ومشروبات)
  logo        String?    // شعار المتجر
  coverImage  String?    // صورة الغلاف
  images      String[]   // صور إضافية للمتجر
  address     String     // عنوان المتجر
  locations   StoreLocation[] // فروع المتجر
  phone       String?    // رقم الهاتف
  email       String?    // البريد الإلكتروني
  workingHours Json?     // ساعات العمل
  categoryId   String?    @db.ObjectId
  category     Category?  @relation(fields: [categoryId], references: [id])
  rating      Float      @default(0.0)  // التقييم
  reviewsCount Int       @default(0)    // عدد التقييمات
  isActive    Boolean    @default(true) // حالة المتجر
  status      String     @default("active") // "active", "inactive", "closed"
  minOrderAmount Float?  // الحد الأدنى للطلب
  deliveryFee   Float?  // رسوم التوصيل
  
  categories  StoreCategory[] // تصنيفات المتجر الداخلية
  products    Product[]      // المنتجات
  offers      StoreOffer[]   // العروض
  orders      Order[]        // الطلبات
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  Coupon Coupon[]

  Discount Discount[]

  GiftCard GiftCard[]

  Reward Reward[]
}

model StoreLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الفرع
  address     String     // عنوان الفرع
  latitude    Float      // خط العرض
  longitude   Float      // خط الطول
  phone       String?    // رقم الهاتف
  isActive    Boolean    @default(true)
  workingHours Json?     // ساعات العمل
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreCategory {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم التصنيف (مثل: برجر، فرايد تشيكن)
  description String?    // وصف التصنيف
  image       String?    // صورة التصنيف
  isActive    Boolean    @default(true)
  sortOrder   Int        @default(0)
  
  products    Product[]  // المنتجات في هذا التصنيف
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     // اسم المنتج
  description String?    // وصف المنتج
  price       Float      // السعر الأساسي
  salePrice   Float?     // سعر العرض (إن وجد)
  images      String[]   // صور المنتج
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  categoryId  String     @db.ObjectId
  category    StoreCategory @relation(fields: [categoryId], references: [id])
  isAvailable Boolean    @default(true)
  ingredients String[]   // المكونات
  extras      Json?      // إضافات اختيارية (مثل: حجم إضافي، إضافات خاصة)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model StoreOffer {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم العرض
  description String?    // وصف العرض
  type        String     // نوع العرض (مثل: عروض رمضان، عروض اللمة)
  image       String?    // صورة العرض
  startDate   DateTime?  // تاريخ بداية العرض
  endDate     DateTime?  // تاريخ نهاية العرض
  discount    Float?     // قيمة الخصم
  isActive    Boolean    @default(true)
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Discount {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String     // اسم الخصم
  description String?    // وصف الخصم
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الخصم
  endDate     DateTime   // تاريخ نهاية الخصم
  isActive    Boolean    @default(true)
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الخصم
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الخصم
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Coupon {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String     @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String     @unique // كود الكوبون
  name        String     // اسم الكوبون
  description String?    // وصف الكوبون
  type        DiscountType // نوع الخصم (نسبة مئوية أو مبلغ ثابت)
  value       Float      // قيمة الخصم
  startDate   DateTime   // تاريخ بداية الكوبون
  endDate     DateTime   // تاريخ نهاية الكوبون
  isActive    Boolean    @default(true)
  maxUses     Int?       // الحد الأقصى لاستخدام الكوبون
  usageCount  Int        @default(0) // عدد مرات الاستخدام
  minOrderAmount Float?  // الحد الأدنى للطلب
  maxDiscountAmount Float? // الحد الأقصى للخصم
  applicableProducts String[] @db.ObjectId // المنتجات التي يطبق عليها الكوبون
  applicableCategories String[] @db.ObjectId // التصنيفات التي يطبق عليها الكوبون
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

enum DiscountType {
  PERCENTAGE  // نسبة مئوية
  FIXED       // مبلغ ثابت
}

model GiftCard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  code        String   @unique
  amount      Float
  balance     Float
  isActive    Boolean  @default(true)
  expiryDate  DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Reward {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String   @db.ObjectId
  store       Store      @relation(fields: [storeId], references: [id])
  name        String
  description String?
  type        String   // "free_product", "discount", "gift_card"
  value       Float
  pointsCost  Int      // تكلفة النقاط للحصول على المكافأة
  isActive    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserLocation {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  name        String     // اسم العنوان (المنزل، العمل، الخ)
  address     String     // العنوان التفصيلي
  apartment   String?    // رقم الشقة
  floor       String?    // رقم الطابق
  building    String?    // رقم المبنى
  street      String?    // اسم الشارع
  area        String?    // المنطقة
  city        String     // المدينة
  latitude    Float
  longitude   Float
  isDefault   Boolean    @default(false) // هل هو العنوان الافتراضي
  type        String     // "home", "work", "other"
  notes       String?    // ملاحظات إضافية
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
